<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java 01 概述+基本数据类型</title>
    <url>/2024/02/23/java01/</url>
    <content><![CDATA[<h1 id="Java-基础语法"><a href="#Java-基础语法" class="headerlink" title="Java 基础语法"></a>Java 基础语法</h1><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>HelloWorld是一个类，文件名必须与类名相同，为HelloWorld.java</p>
<p>打开终端，依次输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">javac HelloWorld.java<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java HelloWorld<br></code></pre></td></tr></table></figure>

<p>会看到终端中输出HelloWorld。</p>
<h2 id="四个概念"><a href="#四个概念" class="headerlink" title="四个概念"></a>四个概念</h2><ol>
<li><strong>类：</strong> 一个模板，描述一类 <em>对象</em> 的行为和状态</li>
<li><strong>对象：</strong> <em>类</em> 的一个实例，有状态和行为</li>
<li><strong>方法：</strong> 就是行为，比如逻辑运算，数据修改……</li>
<li><strong>实例变量：</strong> 决定 <em>对象</em> 的状态</li>
</ol>
<p><strong>example：</strong></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/20210105-java-object-1.png" alt="20210105-java-object-1.png (880×442) (runoob.com)" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>Dog 是一个 <strong>类</strong> ，Dog1,Dog2,Dog3是Dog类里的三个 <strong>对象</strong> ，eat(),run()等是 <strong>方法</strong> ，品种、大小等是 <strong>实例变量</strong> 。</p>
<h2 id="第二个Java程序"><a href="#第二个Java程序" class="headerlink" title="第二个Java程序"></a>第二个Java程序</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDog</span> &#123;<br>	<span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Snoopy&quot;</span>;<br>	<span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>	<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>		<span class="hljs-type">MyDog</span> <span class="hljs-variable">Dog1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDog</span>();<br>		System.out.println(<span class="hljs-string">&quot;Name = &quot;</span>+ Dog1.name);<br>		System.out.println(<span class="hljs-string">&quot;Age = &quot;</span>+ Dog1.age);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这段代码首先定义了一个 <strong>类</strong> MyDog，然后第二、三行定义了两个 <strong>实例变量</strong> ，第五行开始主程序，第六行通过 <strong>方法</strong> MyDog()定义了一个 <strong>对象</strong> Dog1，第七、八行分别输出Dog1的名字和年龄。</p>
<h2 id="Java内存分配"><a href="#Java内存分配" class="headerlink" title="Java内存分配"></a>Java内存分配</h2><ul>
<li><strong>栈：</strong>方法运行时使用的内存</li>
<li><strong>堆：</strong>存储对象或者数组，用new创建的</li>
<li><strong>方法区：</strong>存储可执行的class文件</li>
<li><strong>本地方法栈：</strong>JVM使用操作系统功能时使用</li>
<li><strong>寄存器：</strong>CPU使用</li>
</ul>
<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul>
<li><strong>byte：</strong> <ol>
<li><strong>8位</strong>、<strong>有符号</strong>的二进制整数</li>
<li>取值范围<code>[-128 , 127]</code>默认值为<code>0</code></li>
</ol>
</li>
<li><strong>short：</strong> <ol>
<li><strong>16位</strong>、<strong>有符号</strong>的二进制整数</li>
<li>取值范围<code>[-2<sup>15</sup> , 2<sup>15</sup> - 1]</code> ，默认值为<code>0</code></li>
</ol>
</li>
<li><strong>int：</strong> <ol>
<li><strong>32位</strong>、<strong>有符号</strong>的二进制整数</li>
<li>取值范围<code>[-2<sup>31</sup> , 2<sup>31</sup> - 1]</code>，默认值为<code>0</code></li>
<li>一般的整形变量默认为<strong>int</strong>类型</li>
</ol>
</li>
<li><strong>long：</strong> <ol>
<li><strong>64位</strong>、<strong>有符号</strong>的二进制整数</li>
<li>取值范围<code>[-2<sup>63</sup> , 2<sup>63</sup> - 1]</code>，默认值为<code>0L</code></li>
<li>“L”理论上不分大小写，但“l”容易与“1”混淆</li>
</ol>
</li>
<li><strong>float：</strong> <ol>
<li><strong>单精度</strong>、<strong>32位</strong>、符合IEEE 754标准的浮点数</li>
<li>默认值<code>0.0f</code></li>
<li>不能表示精确的值</li>
</ol>
</li>
<li><strong>double：</strong> <ol>
<li><strong>双精度</strong>、<strong>64位</strong>、符合IEEE 754标准的浮点数</li>
<li>默认值<code>0.0d</code></li>
<li>浮点数类型默认为<strong>double</strong>类型</li>
<li>不能表示精确的值</li>
</ol>
</li>
<li><strong>boolean：</strong> <ol>
<li>表示<strong>1位</strong>的信息</li>
<li>只有两个取值<code>true</code>和<code>false</code></li>
<li>默认为 <code>false</code></li>
</ol>
</li>
<li><strong>char：</strong> <ol>
<li><strong>单一</strong>的<strong>16位</strong>Unicode字符</li>
<li>取值范围<code>[\u0000 , \uffff]</code></li>
</ol>
</li>
</ul>
<h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ul>
<li><strong>使用有意义的名字</strong></li>
<li><strong>驼峰命名法：</strong> 除第一个单词外，其余单词首字母大写<ol>
<li><strong>局部变量：</strong>小写字母开头</li>
<li><strong>实例变量：</strong>小写字母开头</li>
<li><strong>静态变量：</strong>小写字母开头，或全大写，单词间用下划线分割，比如<code>MAX_SIZE</code></li>
<li><strong>常量：</strong>全大写，单词间下划线分割</li>
<li><strong>参数：</strong>小写字母开头</li>
<li><strong>类名：</strong>大写字母开头</li>
</ol>
</li>
<li><strong>避免关键词</strong></li>
</ul>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul>
<li><strong>访问控制修饰符</strong><ol>
<li><strong>default：</strong>默认，同一包内可见</li>
<li><strong>private：</strong>同一类可见，<em>不能修饰类（外部类）</em></li>
<li><strong>public：</strong>所有类可见</li>
<li><strong>protected：</strong>同一包内的类和子类可见，<em>不能修饰类（外部类）</em></li>
</ol>
</li>
<li><strong>非访问修饰符</strong><ol>
<li><strong>static：</strong>声明<strong>静态变量</strong>和<strong>静态方法</strong>，不可声明局部变量</li>
<li><strong>final：</strong>修饰变量的值<strong>无法改变</strong>，且必须显式指定初始值</li>
<li><strong>abstract：</strong>不可实例化对象</li>
<li><strong>synchronized：</strong>声明的方法只能被<strong>一个线程</strong>访问，可用于四个访问修饰符</li>
<li><strong>transient：</strong>预处理类和变量的数据类型</li>
<li><strong>volatile：</strong>统一不同线程中，修饰的变量的值</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 02 运算符</title>
    <url>/2024/02/25/java02/</url>
    <content><![CDATA[<h1 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>, b = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>+（加法）</td>
<td>a + b &#x3D; 20</td>
</tr>
<tr>
<td>-（减法）</td>
<td>a - b &#x3D; 10</td>
</tr>
<tr>
<td>*（乘法）</td>
<td>a * b &#x3D; 75</td>
</tr>
<tr>
<td>&#x2F;（除法）</td>
<td>a &#x2F; b &#x3D; 3</td>
</tr>
<tr>
<td>%（取余）</td>
<td>a % b &#x3D; 0</td>
</tr>
<tr>
<td>++（自增）</td>
<td>a++ &#x3D; 16 ; ++a &#x3D; 16</td>
</tr>
<tr>
<td>–（自减）</td>
<td>a– &#x3D; 14 ; –a &#x3D; 14</td>
</tr>
</tbody></table>
<p>PS. 前缀自增&#x2F;减，先进行算术运算，后赋值运算。后缀自增&#x2F;减先赋值运算后算数运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>     System.out.println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b) );<br>     System.out.println(<span class="hljs-string">&quot;a - b = &quot;</span> + (a - b) );<br>     System.out.println(<span class="hljs-string">&quot;a * b = &quot;</span> + (a * b) );<br>     System.out.println(<span class="hljs-string">&quot;a / b = &quot;</span> + (a / b) );<br>     System.out.println(<span class="hljs-string">&quot;a % b = &quot;</span> + (a % b) );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">selfAddMinus</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<span class="hljs-comment">//定义一个变量；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ++a;<span class="hljs-comment">//前缀自增运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a++;<span class="hljs-comment">//后缀自增运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> --a;<span class="hljs-comment">//前缀自减运算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> a--;<span class="hljs-comment">//后缀自减运算</span><br>        System.out.println(b);<br>        System.out.println(c);<br>        System.out.println(d);<br>        System.out.println(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>, b = <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;（相等）</td>
<td>(a &#x3D;&#x3D; b) &#x3D; false</td>
</tr>
<tr>
<td>!&#x3D;（不相等）</td>
<td>(a !&#x3D; b) &#x3D; true</td>
</tr>
<tr>
<td>&gt;（大于）</td>
<td>(a &gt; b) &#x3D; true</td>
</tr>
<tr>
<td>&lt;（小于）</td>
<td>(a &lt; b) &#x3D; false</td>
</tr>
<tr>
<td>&gt;&#x3D;（大于等于）</td>
<td>(a &gt;&#x3D; b) &#x3D; true</td>
</tr>
<tr>
<td>&lt;&#x3D;（小于等于）</td>
<td>(a &lt;&#x3D; b) &#x3D; false</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br> <br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>     System.out.println(<span class="hljs-string">&quot;a == b = &quot;</span> + (a == b) );<br>     System.out.println(<span class="hljs-string">&quot;a != b = &quot;</span> + (a != b) );<br>     System.out.println(<span class="hljs-string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );<br>     System.out.println(<span class="hljs-string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );<br>     System.out.println(<span class="hljs-string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );<br>     System.out.println(<span class="hljs-string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">A = <span class="hljs-number">0011</span> <span class="hljs-number">1100</span><br>B = <span class="hljs-number">0000</span> <span class="hljs-number">1101</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>相对应位都是1，则结果为1</td>
<td>(A&amp;B) &#x3D; 0000 1100</td>
</tr>
<tr>
<td>|</td>
<td>相对应位都是0，则结果为0</td>
<td>(A|B) &#x3D; 0011 1101</td>
</tr>
<tr>
<td>^</td>
<td>相对应位值相同，则结果为0</td>
<td>(A^B) &#x3D; 0011 0001</td>
</tr>
<tr>
<td>~</td>
<td>翻转操作数的每一位，即0变成1，1变成0</td>
<td>(~A) &#x3D; - 1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左操作数按位左移右操作数指定的位数</td>
<td>(A&lt;&lt;2) &#x3D; 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>左操作数按位右移右操作数指定的位数</td>
<td>(A&gt;&gt;2) &#x3D; 1111</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>
<td>(A&gt;&gt;&gt;2) &#x3D; 0000 1111</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>; <span class="hljs-comment">/* 60 = 0011 1100 */</span> <br>     <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>; <span class="hljs-comment">/* 13 = 0000 1101 */</span><br>     <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     c = a &amp; b;       <span class="hljs-comment">/* 12 = 0000 1100 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &amp; b = &quot;</span> + c );<br> <br>     c = a | b;       <span class="hljs-comment">/* 61 = 0011 1101 */</span><br>     System.out.println(<span class="hljs-string">&quot;a | b = &quot;</span> + c );<br> <br>     c = a ^ b;       <span class="hljs-comment">/* 49 = 0011 0001 */</span><br>     System.out.println(<span class="hljs-string">&quot;a ^ b = &quot;</span> + c );<br> <br>     c = ~a;          <span class="hljs-comment">/*-61 = 1100 0011 */</span><br>     System.out.println(<span class="hljs-string">&quot;~a = &quot;</span> + c );<br> <br>     c = a &lt;&lt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 240 = 1111 0000 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &lt;&lt; 2 = &quot;</span> + c );<br> <br>     c = a &gt;&gt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 15 = 1111 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &gt;&gt; 2  = &quot;</span> + c );<br>  <br>     c = a &gt;&gt;&gt; <span class="hljs-number">2</span>;     <span class="hljs-comment">/* 15 = 0000 1111 */</span><br>     System.out.println(<span class="hljs-string">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">A</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>, B = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>example</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>逻辑与，同真则真</td>
<td>(A &amp;&amp; B) &#x3D; false</td>
</tr>
<tr>
<td>||</td>
<td>逻辑或，同假则假</td>
<td>(A || B ) &#x3D; true</td>
</tr>
<tr>
<td>！</td>
<td>逻辑非，反转真假</td>
<td>(!A) &#x3D; false ; (!B) &#x3D; true</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>     <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>     System.out.println(<span class="hljs-string">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));<br>     System.out.println(<span class="hljs-string">&quot;a || b = &quot;</span> + (a||b) );<br>     System.out.println(<span class="hljs-string">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><table>
<thead>
<tr>
<th>运算符</th>
<th>运算符</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>&lt;&lt;&#x3D;</td>
</tr>
<tr>
<td>+&#x3D;</td>
<td>&gt;&gt;&#x3D;</td>
</tr>
<tr>
<td>-&#x3D;</td>
<td>&amp;&#x3D;</td>
</tr>
<tr>
<td>*&#x3D;</td>
<td>^&#x3D;</td>
</tr>
<tr>
<td>&#x2F;&#x3D;</td>
<td>|&#x3D;</td>
</tr>
<tr>
<td>(%)&#x3D;</td>
<td></td>
</tr>
</tbody></table>
<p>PS. 右侧变量算数运算或位运算结束后赋值给左侧变量，右侧变量值不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        c = a + b;<br>        System.out.println(<span class="hljs-string">&quot;c = a + b = &quot;</span> + c );<br>        c += a ;<br>        System.out.println(<span class="hljs-string">&quot;c += a  = &quot;</span> + c );<br>        c -= a ;<br>        System.out.println(<span class="hljs-string">&quot;c -= a = &quot;</span> + c );<br>        c *= a ;<br>        System.out.println(<span class="hljs-string">&quot;c *= a = &quot;</span> + c );<br>        a = <span class="hljs-number">10</span>;<br>        c = <span class="hljs-number">15</span>;<br>        c /= a ;<br>        System.out.println(<span class="hljs-string">&quot;c /= a = &quot;</span> + c );<br>        a = <span class="hljs-number">10</span>;<br>        c = <span class="hljs-number">15</span>;<br>        c %= a ;<br>        System.out.println(<span class="hljs-string">&quot;c %= a  = &quot;</span> + c );<br>        c &lt;&lt;= <span class="hljs-number">2</span> ;<br>        System.out.println(<span class="hljs-string">&quot;c &lt;&lt;= 2 = &quot;</span> + c );<br>        c &gt;&gt;= <span class="hljs-number">2</span> ;<br>        System.out.println(<span class="hljs-string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );<br>        c &gt;&gt;= <span class="hljs-number">2</span> ;<br>        System.out.println(<span class="hljs-string">&quot;c &gt;&gt;= 2 = &quot;</span> + c );<br>        c &amp;= a ;<br>        System.out.println(<span class="hljs-string">&quot;c &amp;= a  = &quot;</span> + c );<br>        c ^= a ;<br>        System.out.println(<span class="hljs-string">&quot;c ^= a   = &quot;</span> + c );<br>        c |= a ;<br>        System.out.println(<span class="hljs-string">&quot;c |= a   = &quot;</span> + c );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="条件运算符（？：）"><a href="#条件运算符（？：）" class="headerlink" title="条件运算符（？：）"></a>条件运算符（？：）</h2><p><code>variable x = (expression) ? value /<em>if true</em>/ : value /<em>if false</em>/</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>      <span class="hljs-type">int</span> a , b;<br>      a = <span class="hljs-number">10</span>;<br>      <span class="hljs-comment">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span><br>      b = (a == <span class="hljs-number">1</span>) ? <span class="hljs-number">20</span> : <span class="hljs-number">30</span>;<br>      System.out.println( <span class="hljs-string">&quot;Value of b is : &quot;</span> +  b );<br> <br>      <span class="hljs-comment">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span><br>      b = (a == <span class="hljs-number">10</span>) ? <span class="hljs-number">20</span> : <span class="hljs-number">30</span>;<br>      System.out.println( <span class="hljs-string">&quot;Value of b is : &quot;</span> + b );<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="instanceof运算符"><a href="#instanceof运算符" class="headerlink" title="instanceof运算符"></a>instanceof运算符</h2><p>检查该对象是否是一个特定类型（类类型或接口类型）</p>
<p><code>( Object reference variable ) instanceof  (class/interface type)</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span> &#123;&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;James&quot;</span>;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> name <span class="hljs-keyword">instanceof</span> String; <br>      System.out.println( result);<span class="hljs-comment">// 由于 name 是 String 类型，所以返回真</span><br>      <span class="hljs-type">Vehicle</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();<br>      result =  a <span class="hljs-keyword">instanceof</span> Car;<br>      System.out.println( result);<span class="hljs-comment">// 由于 a 是 Car 的一个对象，所以返回真</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 03 语法结构</title>
    <url>/2024/03/03/java03/</url>
    <content><![CDATA[<h1 id="Java语法结构"><a href="#Java语法结构" class="headerlink" title="Java语法结构"></a>Java语法结构</h1><h2 id="判断结构"><a href="#判断结构" class="headerlink" title="判断结构"></a>判断结构</h2><ol>
<li><p><strong>if条件判断</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (<span class="hljs-comment">/*condition*/</span>) &#123;<br>    <span class="hljs-comment">/*do1*/</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-comment">/*condition*/</span>) &#123;<br>    <span class="hljs-comment">/*do2*/</span><br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">/*do3*/</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>switch选择判断</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (<span class="hljs-comment">/*expression*/</span>) &#123;<br>    <span class="hljs-keyword">case</span> value1:<br>        <span class="hljs-comment">/*do1*/</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> value2:<br>        <span class="hljs-comment">/*do2*/</span><br>        <span class="hljs-keyword">break</span>;<br>    ……<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-comment">/*don*/</span><br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span> (<span class="hljs-comment">/*expression*/</span>) &#123;<br>    <span class="hljs-keyword">case</span> value1 -&gt; &#123;<br>        <span class="hljs-comment">/*do1*/</span><br>    &#125;<br>    <span class="hljs-keyword">case</span> value2 -&gt; &#123;<br>        <span class="hljs-comment">/*do2*/</span><br>    &#125;<br>    ......<br>    <span class="hljs-keyword">default</span> -&gt; &#123;<br>        <span class="hljs-comment">/*don*/</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ol>
<li><p><strong>for循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>	<span class="hljs-comment">/*do*/</span><br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>while循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-comment">/*condition*/</span>) &#123;<br>	<span class="hljs-comment">/*do*/</span><br>&#125;  <span class="hljs-comment">//先判断后执行</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>do…while循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>	<span class="hljs-comment">/*do*/</span><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-comment">/*condition*/</span>)  <span class="hljs-comment">//先执行后判断</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>跳转控制语句</strong></p>
<ul>
<li><strong>continue：</strong>跳出当次循环，执行下次循环</li>
<li><strong>break：</strong>退出整个循环</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 05 方法</title>
    <url>/2024/03/05/java05/</url>
    <content><![CDATA[<h1 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h1><h2 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h2><ol>
<li><p><strong>简单方法定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名() &#123;<br>    <span class="hljs-comment">/*方法体*/</span><br>&#125;<br><br><br>方法名();  <span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>带参数的方法定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> 方法名(参数数据类型 参数, ...) &#123;<br>    <span class="hljs-comment">/*方法体*/</span><br>&#125;<br>方法名(参数数据类型 参数, ...);  <span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>带返回值得到方法定义</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> 返回值类型 方法名 (参数数据类型 参数, ...) &#123;<br>    <span class="hljs-comment">/*方法体*/</span><br>    <span class="hljs-keyword">return</span> 返回值;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>同一个类中，方法名相同，参数<em>（个数，类型，顺序）</em>不同。一般将同类操作的方法定义为同一方法名。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>方法调用时存储在栈内存，内部的参数，也在栈内存。调用结束后，内存全部释放。因此：</p>
<ol>
<li><p>传递基本数据类型时，传递的是真实的数据，形参的改变，不影响实际参数的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        sout(num);  <span class="hljs-comment">//100</span><br>        change1(num);<br>        sout(num);  <span class="hljs-comment">//100</span><br>        num = change2(num);<br>        sout(num);  <span class="hljs-comment">//200</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change1</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        num = <span class="hljs-number">200</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">change2</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        num = <span class="hljs-number">200</span>;<br>        <span class="hljs-keyword">return</span> num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p>传递引用数据类型时，传递的是地址值，形参的改变，影响实际参数的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        sout(arr[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//100</span><br>        change1(arr[<span class="hljs-number">1</span>]);<br>        sout(arr[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//200</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change1</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-number">200</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 06 JavaBean类</title>
    <url>/2024/03/09/java06/</url>
    <content><![CDATA[<h1 id="标准的JavaBean类"><a href="#标准的JavaBean类" class="headerlink" title="标准的JavaBean类"></a>标准的JavaBean类</h1><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ol>
<li><strong>类名要见名知意</strong></li>
<li><strong>成员变量使用<code>private</code>修饰</strong></li>
<li><strong>提供至少两个构造方法</strong><ul>
<li>无参构造方法</li>
<li>带全部参数的构造方法</li>
</ul>
</li>
<li><strong>成员方法</strong><ul>
<li>提供每一个成员变量对应的<code>setXxx() / getXxx()</code></li>
<li>其他行为</li>
</ul>
</li>
</ol>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> myPackage001;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//无参构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">//带全部参数的构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//每个变量的getXxx()和setXxx()</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 04 数组</title>
    <url>/2024/03/04/java04/</url>
    <content><![CDATA[<h1 id="Java数组"><a href="#Java数组" class="headerlink" title="Java数组"></a>Java数组</h1><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ol>
<li><p><strong>静态初始化</strong></p>
<p><code>数据类型[] 数组名 = new 数据类型[] &#123;元素1，元素2，元素3...&#125;;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] array2 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;  <span class="hljs-comment">//简写</span><br></code></pre></td></tr></table></figure>
</li>
<li><p><strong>动态初始化</strong></p>
<p><code>数据类型[] 数组名 = new 数据类型[数组长度];</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure>

<p>数组默认初始化值:</p>
<ul>
<li><strong>整数类型：</strong>0</li>
<li><strong>小数类型：</strong>0.0</li>
<li><strong>字符类型：</strong>‘&#x2F;u0000’   空格</li>
<li><strong>布尔类型：</strong>false</li>
<li><strong>引用数据类型：</strong>null</li>
</ul>
</li>
</ol>
<h2 id="数组的地址与元素访问"><a href="#数组的地址与元素访问" class="headerlink" title="数组的地址与元素访问"></a>数组的地址与元素访问</h2><ol>
<li><p><strong>数组的地址</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>System.out.println(arr);  <span class="hljs-comment">//[I@6d03e736</span><br></code></pre></td></tr></table></figure>

<p><strong>“I”</strong>是数组类型，<strong>“6d03e736”</strong>是数组在内存中的位置</p>
</li>
<li><p><strong>元素访问</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><br>System.out.println(arr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//1</span><br>System.out.println(arr[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//2</span><br>System.out.println(arr[<span class="hljs-number">2</span>]);  <span class="hljs-comment">//3</span><br><br><span class="hljs-comment">//获取</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>System.out.println(num);  <span class="hljs-comment">//1</span><br><br><span class="hljs-comment">//存储</span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br>System.out.println(arr[<span class="hljs-number">0</span>]);  <span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure></li>
</ol>
<h2 id="数组的内存图"><a href="#数组的内存图" class="headerlink" title="数组的内存图"></a>数组的内存图</h2><ol>
<li><p><strong>各自指向不同空间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure>

<p>此时arr1和arr2通过new在堆内存中占用两个内存空间。arr1和arr2相互独立。</p>
</li>
<li><p><strong>指向同一空间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span>[] arr2 = arr1;<br></code></pre></td></tr></table></figure>

<p>这段代码中，arr1通过new在堆内存中占据空间。但是arr2并没有使用new方法，而是指向了arr1的空间，共用同一个内存空间。arr1的值改变，arr2的值也会改变。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java 07 字符串</title>
    <url>/2024/03/12/java07/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
